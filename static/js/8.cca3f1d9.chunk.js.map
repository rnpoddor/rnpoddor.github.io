{"version":3,"sources":["../node_modules/dxf-writer/src/Drawing.js","../node_modules/dxf-writer/src/LineType.js","../node_modules/dxf-writer/src/Layer.js","../node_modules/dxf-writer/src/Line.js","../node_modules/dxf-writer/src/Arc.js","../node_modules/dxf-writer/src/Circle.js","../node_modules/dxf-writer/src/Text.js","../node_modules/dxf-writer/src/Polyline.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B,0BAA0B;;AAE1B;AACA;AACA;AACA;;AAEA,2BAA2B;;AAE3B;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B,0BAA0B;;AAE1B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK,wDAAwD;AAC7D,KAAK,gEAAgE;AACrE,KAAK;AACL;;AAEA;AACA;AACA,KAAK;AACL;;AAEA,yB;;;;;;;AC3MA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,iBAAiB;AACpC,oBAAoB,qBAAqB;AACzC,oBAAoB,sBAAsB;;AAE1C,uBAAuB,0BAA0B;AACjD;AACA,wBAAwB,iBAAiB;AACzC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0B;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,oBAAoB,iBAAiB;AACrC,mBAAmB,kBAAkB;AACrC,iB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA,S;;;AAGA;AACA;AACA;;AAEA,uB;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,oBAAoB,QAAQ,QAAQ,QAAQ;AAC5C,oBAAoB,QAAQ,QAAQ,QAAQ;AAC5C;AACA;AACA;;AAEA,sB;;;;;;;ACrBA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,oBAAoB,QAAQ,QAAQ,QAAQ;AAC5C,oBAAoB,OAAO,QAAQ,gBAAgB,QAAQ,cAAc;AACzE;AACA;AACA;;AAEA,qB;;;;;;;AC7BA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,oBAAoB,QAAQ,QAAQ,QAAQ;AAC5C,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA,wB;;;;;;;ACzBA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,mBAAmB,WAAW;AAC9B,oBAAoB,QAAQ,QAAQ,QAAQ;AAC5C,oBAAoB,YAAY,QAAQ,cAAc;AACtD;AACA;AACA;;AAEA,sB;;;;;;;AC9BA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA,wBAAwB,kBAAkB,QAAQ,kBAAkB;AACpE;;AAEA;AACA;AACA;AACA;;AAEA,0B","file":"static/js/8.cca3f1d9.chunk.js","sourcesContent":["const LineType = require('./LineType');\r\nconst Layer = require('./Layer');\r\nconst Line = require('./Line');\r\nconst Arc = require('./Arc');\r\nconst Circle = require('./Circle');\r\nconst Text = require('./Text');\r\nconst Polyline = require('./Polyline');\r\n\r\nclass Drawing\r\n{\r\n    constructor()\r\n    {\r\n        this.layers = {};\r\n        this.activeLayer = null;\r\n        this.lineTypes = {};\r\n\r\n        for (let i = 0; i < Drawing.LINE_TYPES.length; ++i)\r\n        {\r\n            this.addLineType(Drawing.LINE_TYPES[i].name,\r\n                             Drawing.LINE_TYPES[i].description,\r\n                             Drawing.LINE_TYPES[i].elements);\r\n        }\r\n\r\n        for (let i = 0; i < Drawing.LAYERS.length; ++i)\r\n        {\r\n            this.addLayer(Drawing.LAYERS[i].name,\r\n                          Drawing.LAYERS[i].colorNumber,\r\n                          Drawing.LAYERS[i].lineTypeName);\r\n        }\r\n\r\n        this.setActiveLayer('0');\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @param {string} name\r\n     * @param {string} description\r\n     * @param {array} elements - if elem > 0 it is a line, if elem < 0 it is gap, if elem == 0.0 it is a \r\n     */\r\n    addLineType(name, description, elements)\r\n    {\r\n        this.lineTypes[name] = new LineType(name, description, elements);\r\n        return this;\r\n    }\r\n\r\n    addLayer(name, colorNumber, lineTypeName)\r\n    {\r\n        this.layers[name] = new Layer(name, colorNumber, lineTypeName);\r\n        return this;\r\n    }\r\n    \r\n    setActiveLayer(name)\r\n    {\r\n        this.activeLayer = this.layers[name];\r\n        return this;\r\n    }\r\n\r\n    drawLine(x1, y1, x2, y2)\r\n    {\r\n        this.activeLayer.addShape(new Line(x1, y1, x2, y2));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} x1 - Center x\r\n     * @param {number} y1 - Center y\r\n     * @param {number} r - radius\r\n     * @param {number} startAngle - degree \r\n     * @param {number} endAngle - degree \r\n     */\r\n    drawArc(x1, y1, r, startAngle, endAngle)\r\n    {\r\n        this.activeLayer.addShape(new Arc(x1, y1, r, startAngle, endAngle));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} x1 - Center x\r\n     * @param {number} y1 - Center y\r\n     * @param {number} r - radius\r\n     */\r\n    drawCircle(x1, y1, r)\r\n    {\r\n        this.activeLayer.addShape(new Circle(x1, y1, r));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} x1 - x\r\n     * @param {number} y1 - y\r\n     * @param {number} height - Text height\r\n     * @param {number} rotation - Text rotation\r\n     * @param {string} value - the string itself\r\n     */\r\n    drawText(x1, y1, height, rotation, value)\r\n    {\r\n        this.activeLayer.addShape(new Text(x1, y1, height, rotation, value));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {array} points - Array of points like [ [x1, y1], [x2, y2]... ] \r\n     */\r\n    drawPolyline(points)\r\n    {\r\n        this.activeLayer.addShape(new Polyline(points));\r\n        return this;\r\n    }\r\n\r\n    _getDxfLtypeTable()\r\n    {\r\n        let s = '0\\nTABLE\\n'; //start table\r\n        s += '2\\nLTYPE\\n';    //name table as LTYPE table\r\n\r\n        for (let lineTypeName in this.lineTypes)\r\n        {\r\n            s += this.lineTypes[lineTypeName].toDxfString();\r\n        }\r\n\r\n        s += '0\\nENDTAB\\n'; //end table\r\n\r\n        return s;\r\n    }\r\n\r\n    _getDxfLayerTable()\r\n    {\r\n        let s = '0\\nTABLE\\n'; //start table\r\n        s += '2\\nLAYER\\n'; //name table as LAYER table\r\n\r\n        for (let layerName in this.layers)\r\n        {\r\n            s += this.layers[layerName].toDxfString();\r\n        }\r\n\r\n        s += '0\\nENDTAB\\n';\r\n\r\n        return s;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        let s = '';\r\n\r\n        //start section\r\n        s += '0\\nSECTION\\n';\r\n        //name section as TABLES section\r\n        s += '2\\nTABLES\\n';\r\n\r\n        s += this._getDxfLtypeTable();\r\n        s += this._getDxfLayerTable();\r\n\r\n        //end section\r\n        s += '0\\nENDSEC\\n';\r\n\r\n\r\n        //ENTITES section\r\n        s += '0\\nSECTION\\n';\r\n        s += '2\\nENTITIES\\n';\r\n\r\n        for (let layerName in this.layers)\r\n        {\r\n            let layer = this.layers[layerName];\r\n            s += layer.shapesToDxf();\r\n            // let shapes = layer.getShapes();\r\n        }\r\n\r\n        s += '0\\nENDSEC\\n';\r\n\r\n\r\n        //close file\r\n        s += '0\\nEOF';\r\n\r\n        return s;\r\n    }\r\n\r\n}\r\n\r\n//AutoCAD Color Index (ACI)\r\n//http://sub-atomic.com/~moses/acadcolors.html\r\nDrawing.ACI = \r\n{\r\n    LAYER : 0,\r\n    RED : 1,\r\n    YELLOW : 2,\r\n    GREEN : 3,\r\n    CYAN : 4,\r\n    BLUE : 5,\r\n    MAGENTA : 6,\r\n    WHITE : 7\r\n}\r\n\r\nDrawing.LINE_TYPES = \r\n[\r\n    {name: 'CONTINUOUS', description: '______', elements: []},\r\n    {name: 'DASHED',    description: '_ _ _ ', elements: [5.0, -5.0]},\r\n    {name: 'DOTTED',    description: '. . . ', elements: [0.0, -5.0]}\r\n]\r\n\r\nDrawing.LAYERS = \r\n[\r\n    {name: '0',  colorNumber: Drawing.ACI.WHITE, lineTypeName: 'CONTINUOUS'}\r\n]\r\n\r\nmodule.exports = Drawing;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dxf-writer/src/Drawing.js\n// module id = 1192\n// module chunks = 8","class LineType\r\n{\r\n    /**\r\n     * @param {string} name\r\n     * @param {string} description\r\n     * @param {array} elements - if elem > 0 it is a line, if elem < 0 it is gap, if elem == 0.0 it is a \r\n     */\r\n    constructor(name, description, elements)\r\n    {\r\n        this.name = name;\r\n        this.description = description;\r\n        this.elements = elements;\r\n    }\r\n\r\n    /**\r\n     * @link https://www.autodesk.com/techpubs/autocad/acadr14/dxf/ltype_al_u05_c.htm\r\n     */\r\n    toDxfString()\r\n    {\r\n        let s = '0\\nLTYPE\\n';\r\n        s += '72\\n65\\n';\r\n        s += '70\\n64\\n';\r\n        s += `2\\n${this.name}\\n`;\r\n        s += `3\\n${this.description}\\n`;\r\n        s += `73\\n${this.elements.length}\\n`;\r\n        s += `40\\n${this.getElementsSum()}\\n`;\r\n\r\n        for (let i = 0; i < this.elements.length; ++i)\r\n        {\r\n            s += `49\\n${this.elements[i]}\\n`;\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    getElementsSum()\r\n    {\r\n        let sum = 0;\r\n        for (let i = 0; i < this.elements.length; ++i)\r\n        {\r\n            sum += Math.abs(this.elements[i]);\r\n        }\r\n\r\n        return sum;\r\n    }\r\n}\r\n\r\nmodule.exports = LineType;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dxf-writer/src/LineType.js\n// module id = 1193\n// module chunks = 8","class Layer\r\n{\r\n    constructor(name, colorNumber, lineTypeName)\r\n    {\r\n        this.name = name;\r\n        this.colorNumber = colorNumber;\r\n        this.lineTypeName = lineTypeName;\r\n        this.shapes = [];\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        let s = '0\\nLAYER\\n';\r\n        s += '70\\n64\\n';\r\n        s += `2\\n${this.name}\\n`;\r\n        s += `62\\n${this.colorNumber}\\n`;\r\n        s += `6\\n${this.lineTypeName}\\n`;\r\n        return s;        \r\n    }\r\n\r\n    addShape(shape)\r\n    {\r\n        this.shapes.push(shape);\r\n        shape.layer = this;\r\n    }\r\n\r\n    getShapes()\r\n    {\r\n        return this.shapes;\r\n    }\r\n\r\n    shapesToDxf()\r\n    {\r\n        let s = '';\r\n        for (let i = 0; i < this.shapes.length; ++i)\r\n        {\r\n            s += this.shapes[i].toDxfString();\r\n        } \r\n        \r\n        \r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Layer;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dxf-writer/src/Layer.js\n// module id = 1194\n// module chunks = 8","class Line\r\n{\r\n    constructor(x1, y1, x2, y2)\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/line_al_u05_c.htm\r\n        let s = `0\\nLINE\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n0\\n`;\r\n        s += `11\\n${this.x2}\\n21\\n${this.y2}\\n31\\n0\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Line;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dxf-writer/src/Line.js\n// module id = 1195\n// module chunks = 8","class Arc\r\n{\r\n    /**\r\n     * @param {number} x1 - Center x\r\n     * @param {number} y1 - Center y\r\n     * @param {number} r - radius\r\n     * @param {number} startAngle - degree \r\n     * @param {number} endAngle - degree \r\n     */\r\n    constructor(x1, y1, r, startAngle, endAngle)\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.r = r;\r\n        this.startAngle = startAngle;\r\n        this.endAngle = endAngle;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/line_al_u05_c.htm\r\n        let s = `0\\nARC\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n0\\n`;\r\n        s += `40\\n${this.r}\\n50\\n${this.startAngle}\\n51\\n${this.endAngle}\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Arc;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dxf-writer/src/Arc.js\n// module id = 1196\n// module chunks = 8","class Circle\r\n{\r\n    /**\r\n     * @param {number} x1 - Center x\r\n     * @param {number} y1 - Center y\r\n     * @param {number} r - radius\r\n     */\r\n    constructor(x1, y1, r)\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.r = r;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/circle_al_u05_c.htm\r\n        let s = `0\\nCIRCLE\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n0\\n`;\r\n        s += `40\\n${this.r}\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Circle;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dxf-writer/src/Circle.js\n// module id = 1197\n// module chunks = 8","class Text\r\n{\r\n    /**\r\n     * @param {number} x1 - x\r\n     * @param {number} y1 - y\r\n     * @param {number} height - Text height\r\n     * @param {number} rotation - Text rotation\r\n     * @param {string} value - the string itself\r\n     */\r\n    constructor(x1, y1, height, rotation, value)\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.height = height;\r\n        this.rotation = rotation;\r\n        this.value = value;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/text_al_u05_c.htm\r\n        let s = `0\\nTEXT\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `1\\n${this.value}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n0\\n`;\r\n        s += `40\\n${this.height}\\n50\\n${this.rotation}\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Text;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dxf-writer/src/Text.js\n// module id = 1198\n// module chunks = 8","class Polyline\r\n{\r\n    /**\r\n     * @param {array} points - Array of points like [ [x1, y1], [x2, y2]... ]\r\n     */\r\n    constructor(points)\r\n    {\r\n        this.points = points;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/polyline_dxf_06.htm\r\n        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/vertex_dxf_06.htm\r\n        let s = `0\\nPOLYLINE\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `66\\n1\\n70\\n0\\n`;\r\n\r\n        for (let i = 0; i < this.points.length; ++i)\r\n        {\r\n            s += `0\\nVERTEX\\n`;\r\n            s += `8\\n${this.layer.name}\\n`;\r\n            s += `70\\n0\\n`;\r\n            s += `10\\n${this.points[i][0]}\\n20\\n${this.points[i][1]}\\n`;\r\n        }\r\n        \r\n        s += `0\\nSEQEND\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Polyline;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dxf-writer/src/Polyline.js\n// module id = 1199\n// module chunks = 8"],"sourceRoot":""}